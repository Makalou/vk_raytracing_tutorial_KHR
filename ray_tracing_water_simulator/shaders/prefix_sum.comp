// SPDX-License-Identifier: Apache-2.0 OR MIT OR Unlicense

// A prefix sum.
//
// This test builds in three configurations. The default is a
// compatibility mode, essentially plain GLSL. With ATOMIC set, the
// flag loads and stores are atomic operations, but uses barriers.
// With both ATOMIC and VKMM set, it uses acquire/release semantics
// instead of barriers.

#version 450

#extension GL_KHR_memory_scope_semantics : enable

#define N_ROWS 16
#define LG_WG_SIZE 9
#define WG_SIZE (1 << LG_WG_SIZE) // 512
#define PARTITION_SIZE (WG_SIZE * N_ROWS)

layout(local_size_x = WG_SIZE, local_size_y = 1) in;

layout(set = 0, binding = 0) readonly buffer InBuf {
    ivec2 inbuf[];
};

// These correspond to X, A, P respectively in the prefix sum paper.
#define FLAG_NOT_READY 0u
#define FLAG_AGGREGATE_READY 1u
#define FLAG_PREFIX_READY 2u

struct State {
    uint flag;
    ivec2 aggregate;
    ivec2 prefix;
};

// Perhaps this should be "nonprivate" with VKMM
layout(set = 0, binding = 1) volatile buffer StateBuf {
    uint part_counter;
    State[] state;
};

layout(set = 0, binding = 2) buffer OutBuf {
    ivec2 outbuf[];
};

layout(push_constant) uniform _PushConstant {
    vec4 data;
}pushData;

shared ivec2 sh_scratch[WG_SIZE];
shared uint sh_part_ix;
shared ivec2 sh_prefix;
shared uint sh_flag;

void main() {
    int grid_size = int(pushData.data.y);
    int array_size = (grid_size - 1) * (grid_size - 1) * (grid_size - 1);

    ivec2 local[N_ROWS];
    // Determine partition to process by atomic counter (described in Section
    // 4.4 of prefix sum paper).
    if (gl_LocalInvocationID.x == 0) {
        sh_part_ix = atomicAdd(part_counter, 1);
    }
    barrier();
    uint part_ix = sh_part_ix;

    uint ix = part_ix * PARTITION_SIZE + gl_LocalInvocationID.x * N_ROWS;

    // TODO: gate buffer read? (evaluate whether shader check or
    // CPU-side padding is better)
    if(ix < array_size)
    {
        local[0] = inbuf[ix];
    }
    
    for (uint i = 1; i < N_ROWS; i++) {
        if((ix + i) < array_size)
        {
            local[i] = local[i - 1] + inbuf[ix + i];
        }
    }
    ivec2 agg = local[N_ROWS - 1];
    sh_scratch[gl_LocalInvocationID.x] = agg;
    for (uint i = 0; i < LG_WG_SIZE; i++) {
        barrier();
        if (gl_LocalInvocationID.x >= (1u << i)) {
            ivec2 other = sh_scratch[gl_LocalInvocationID.x - (1u << i)];
            agg += other;
        }
        barrier();
        sh_scratch[gl_LocalInvocationID.x] = agg;
    }

    // Publish aggregate for this partition
    if (gl_LocalInvocationID.x == WG_SIZE - 1) {
        state[part_ix].aggregate = agg;
        if (part_ix == 0) {
            state[0].prefix = agg;
        }
    }
    // Write flag with release semantics; this is done portably with a barrier.
    memoryBarrierBuffer();
    if (gl_LocalInvocationID.x == WG_SIZE - 1) {
        uint flag = FLAG_AGGREGATE_READY;
        if (part_ix == 0) {
            flag = FLAG_PREFIX_READY;
        }
        atomicStore(state[part_ix].flag, flag, gl_ScopeDevice, 0,0);
    }

    ivec2 exclusive = ivec2(0);
    if (part_ix != 0) {
        // step 4 of paper: decoupled lookback
        uint look_back_ix = part_ix - 1;

        ivec2 their_agg;
        uint their_ix = 0;
        while (true) {
            // Read flag with acquire semantics.
            if (gl_LocalInvocationID.x == WG_SIZE - 1) {
                sh_flag = atomicLoad(state[look_back_ix].flag, gl_ScopeDevice, 0,0);
            }
            // The flag load is done only in the last thread. However, because the
            // translation of memoryBarrierBuffer to Metal requires uniform control
            // flow, we broadcast it to all threads.
            barrier();
            memoryBarrierBuffer();
            uint flag = sh_flag;
            barrier();

            if (flag == FLAG_PREFIX_READY) {
                if (gl_LocalInvocationID.x == WG_SIZE - 1) {
                    ivec2 their_prefix = state[look_back_ix].prefix;
                    exclusive += their_prefix;
                }
                break;
            } else if (flag == FLAG_AGGREGATE_READY) {
                if (gl_LocalInvocationID.x == WG_SIZE - 1) {
                    their_agg = state[look_back_ix].aggregate;
                    exclusive += their_agg;
                }
                look_back_ix--;
                their_ix = 0;
                continue;
            }
            // else spin

            if (gl_LocalInvocationID.x == WG_SIZE - 1) {
                // Unfortunately there's no guarantee of forward progress of other
                // workgroups, so compute a bit of the aggregate before trying again.
                // In the worst case, spinning stops when the aggregate is complete.
                ivec2 m = ivec2(0);
                if(look_back_ix * PARTITION_SIZE + their_ix < array_size)
                {
                    ivec2 m = inbuf[look_back_ix * PARTITION_SIZE + their_ix];
                }
                if (their_ix == 0) {
                    their_agg = m;
                } else {
                    their_agg += m;
                }
                their_ix++;
                if (their_ix == PARTITION_SIZE) {
                    exclusive += their_agg;
                    if (look_back_ix == 0) {
                        sh_flag = FLAG_PREFIX_READY;
                    } else {
                        look_back_ix--;
                        their_ix = 0;
                    }
                }
            }
            barrier();
            flag = sh_flag;
            barrier();
            if (flag == FLAG_PREFIX_READY) {
                break;
            }
        }
        // step 5 of paper: compute inclusive prefix
        if (gl_LocalInvocationID.x == WG_SIZE - 1) {
            ivec2 inclusive_prefix = exclusive + agg;
            sh_prefix = exclusive;
            state[part_ix].prefix = inclusive_prefix;
        }
        memoryBarrierBuffer();
        if (gl_LocalInvocationID.x == WG_SIZE - 1) {
            atomicStore(state[part_ix].flag, FLAG_PREFIX_READY, gl_ScopeDevice, 0,0);
        }
    }
    barrier();
    if (part_ix != 0) {
        exclusive = sh_prefix;
    }

    ivec2 row = exclusive;
    if (gl_LocalInvocationID.x > 0) {
        ivec2 other = sh_scratch[gl_LocalInvocationID.x - 1];
        row += other;
    }
    for (uint i = 0; i < N_ROWS; i++) {
        ivec2 m = row + local[i];
        // Make sure buffer allocation is padded appropriately.
        if(ix + i < array_size)
        {
            outbuf[ix + i] = m;
        }
    }
}