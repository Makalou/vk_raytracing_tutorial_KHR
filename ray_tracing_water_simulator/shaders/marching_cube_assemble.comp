#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#define VULKAN 100

#include "host_device.h"
#include "water_sim_utils.glsl"
#include "marching_cube_table.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(push_constant) uniform _PushConstant {
    vec4 data;
}pushData;

layout(set = 0, binding = 0) readonly buffer _IndexArray
{
    uint idx[];
}cube_config;

layout(set = 0, binding = 1) readonly buffer _OffsetArray
{
    ivec2 offset[];
}offsets;

layout(set = 0, binding = 2) readonly buffer _GeomDesc
{
    WaterSurfaceGeomDesc geomDesc;
};

layout(set = 0, binding = 3) writeonly buffer _VKAccelerationStructureBuildRangeInfo
{
    uint primitiveCount;
    uint primitiveOffset;
    uint firstVertex;
    uint transformOffset;
}accelRangeInfo;

layout(buffer_reference, scalar) writeonly buffer Vertices {vec3 v[];};
layout(buffer_reference, scalar) writeonly buffer Indices {uint i[];};
layout(buffer_reference, scalar) writeonly buffer Normals {vec3 n[];};

void main()
{
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y,gl_GlobalInvocationID.z);
    int grid_size = int(pushData.data.y);
    if(gridCoord.x >= (grid_size - 1) || gridCoord.y >= (grid_size - 1) || gridCoord.z >= (grid_size - 1))
    {
        return;
    }
    int array_bound = (grid_size - 1) * (grid_size - 1) * (grid_size - 1);
    float h = 10.0 / float(grid_size);
    int idx_of_cube = gridCoord.z * (grid_size - 1)*(grid_size - 1)  + gridCoord.y * (grid_size - 1) + gridCoord.x;

    if(idx_of_cube == array_bound - 1)
    {
        // Only the last thread write the primitie count
        accelRangeInfo.primitiveCount = offsets.offset[idx_of_cube].y /3 ;
    }

    uint cube_table_idx = cube_config.idx[idx_of_cube];

    uint vertex_count = num_table[cube_table_idx].x;
    uint index_count = num_table[cube_table_idx].y;

    if(vertex_count == 0 || index_count == 0)
    {
        return;
    }

    uint vertex_offset = int(offsets.offset[idx_of_cube].x) - vertex_count;
    uint index_offset =  int(offsets.offset[idx_of_cube].y) - index_count;

    Vertices vertices = Vertices(geomDesc.vertexAddress);
    Indices indices = Indices(geomDesc.indexAddress);
    Normals normals = Normals(geomDesc.normalAddress);

    vec3 vertex_base = vec3(-5.0) + h * gridCoord;

    for(int i = 0; i < vertex_count; i++)
    {
        int vet = marching_vertex_table[cube_table_idx][i];
        vec3 vertex_pos_offset = marching_vertex_offset_table[vet];
        vertices.v[vertex_offset + i] = vertex_base + h * vertex_pos_offset;
    }

    for(int i = 0; i < index_count; i++)
    {
        indices.i[index_offset + i] = vertex_offset + marching_vertex_table_local[cube_table_idx][i];
    }
}